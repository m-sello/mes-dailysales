package ls.mestech.erp.dailysales.domain.model;

import lombok.NoArgsConstructor;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.springframework.data.annotation.Id;
import org.springframework.data.annotation.PersistenceCreator;
import org.springframework.data.annotation.Version;
import org.springframework.data.relational.core.mapping.Column;
import org.springframework.data.relational.core.mapping.MappedCollection;
import org.springframework.data.relational.core.mapping.Table;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

@NoArgsConstructor
@Table(name = "daily_sales")
public class DailySales {
    @Id
    @Column("id")
    String id;
    @Column("float_amount")
    BigDecimal floatAmount;
    @Column("captured_dt")
    LocalDateTime capturedDt;
    @Column("comments")
    String comments;
    @Version
    Integer version;
    @MappedCollection(idColumn = "daily_sales_id", keyColumn = "id")
    final Set<DailyTender> dailyTenders = new HashSet<>();
    @MappedCollection(idColumn = "daily_sales_id", keyColumn = "id")
    final Set<DailySalesLog> dailySalesLogs = new HashSet<>();

    @MappedCollection(idColumn = "daily_sales_id", keyColumn = "id")
    final Set<DailySalesTaken> dailySalesTaken = new HashSet<>();
    @PersistenceCreator
    public DailySales(BigDecimal floatAmount, LocalDateTime capturedDt, String comments,
                      Set<DailyTender> dailyTenders, Set<DailySalesLog> dailySalesLogs, Set<DailySalesTaken> dailySalesTaken) {
        //ID is autogenerated
        this.floatAmount = floatAmount;
        this.capturedDt = capturedDt;
        this.comments = comments;
        if(dailyTenders != null) this.dailyTenders.addAll(dailyTenders);
        if(dailySalesLogs != null) this.dailySalesLogs.addAll(dailySalesLogs);
        if(dailySalesTaken != null) this.dailySalesTaken.addAll(dailySalesTaken);
    }

    @Override
    public boolean equals(Object o) {
        return EqualsBuilder.reflectionEquals(this, o);
    }

    @Override
    public int hashCode() {
        return HashCodeBuilder.reflectionHashCode(this);
    }

    @Override
    public String toString() {
        return ToStringBuilder.reflectionToString(this);
    }
    public String getComments() {
        return comments;
    }
    public void setComments(String comments) {
        this.comments = comments;
    }
    public String getId() {
        return id;
    }
    public void setId(String id) {
        this.id = id;
    }

    public BigDecimal getFloatAmount() {
        return floatAmount;
    }

    public void setFloatAmount(BigDecimal floatAmount) {
        this.floatAmount = floatAmount;
    }

    public LocalDateTime getCapturedDt() {
        return capturedDt;
    }
    public void setCapturedDt(LocalDateTime capturedDt) { this.capturedDt = capturedDt;}

    public Set<DailySalesLog> getDailySalesLogs() {
        return dailySalesLogs;
    }

    public void addDailySalesLogs(DailySalesLog dailySalesLogs) {
        this.dailySalesLogs.add(dailySalesLogs);
    }

    public Set<DailyTender> getDailyTenders() {
        return dailyTenders;
    }

    public void addDailyTenders(DailyTender dailyTenders) {
        this.dailyTenders.add(dailyTenders);
    }

    public void RemoveAllDailySales() {
        this.dailyTenders.clear();
    }

    public Set<DailySalesTaken> getDailySalesTaken() {
        return dailySalesTaken;
    }
}